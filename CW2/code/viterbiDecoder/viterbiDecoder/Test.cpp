#pragma once

#include <iostream>
#include <string>

#include "burst.h"
#include "Viterbi.h"
#include "common.h"

using namespace std;

void menu() {
	cout << "Menu" << endl;
	cout << "Please enter the apropriate number for the function you wish to exicute;" << endl;
	cout << "1; Decode Default Encryption" << endl;
	cout << "2; Decode All Encryption" << endl;
	cout << "3; Delete All the decoded files" << endl;
	cout << "4; Exit" << endl;
}

void main() {

	common *c = new common;

	vector<string> *fnames = new vector<string>;
	vector<Viterbi> *viturbies = new vector<Viterbi>;
	Viterbi *v = new Viterbi(3, 2, 1, 0, 2, 2);

	//this is bad
	string test
	int x = 0;
	string command = "del /Q ";
	string path = "Decoded\\*.txt";
	int count = 0;

	menu();
	while (x != -5) {
		cin >> x;
		while (!(cin >> x)) {
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			cout << "Invalid input.  Try again: ";
		}
		switch (x)
		{
		case 1:
			cout << "Decodeding Default Encryption" << endl;			
			cout << "Encoded File: " << test << endl << endl;
			cout << "Decoded File : " << v->decode(test) << endl;
			menu();
			break;
		case 2:
			cout << "Decoding All Encryption";
			c->readinlbl("filenames.txt", fnames);
			count = 0;
			for each (string s in *fnames)
			{
				int r3 = (int)(s[5] - 48);
				int r2 = (int)(s[12] - 48);
				int r1 = (int)(s[19] - 48);
				int i1 = (int)(s[29] - 48);
				int xorc1 = (int)(s[39] - 48);
				int xorc2 = (int)(s[49] - 48);
				viturbies->push_back(Viterbi(r3, r2, r1, i1, xorc1, xorc2));
			}
			
			for each(Viterbi v in *viturbies) {
				string file = ("Encoded\\" + fnames->at(count));
				string temp = v.decode(c->readin(file));
				c->printtofile("Decoded\\" + fnames->at(count) + " Decoded", temp);
				count++;
			}
			cout << "Decoding Complete" << endl;
			menu();
			break;
		case 3:
			cout << "Deleting all Decoded .txt Files" << endl;
			system(command.append(path).c_str());
			break;
		case 4:
			cout << "Now exiting from program" << endl;
			cout << "Bye Bye";
			x = -5;
			break;
		default:
			cin.clear();
			cout << "Please enter a valid option" << endl;
		}

		//burst *b = new burst();
		//cout << b->addErrors(test) << endl;
		
	}
	delete fnames;
	delete viturbies;
}

	